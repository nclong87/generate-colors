{"version":3,"file":"bundle.js","sources":["../src/rgbToHsv.js","../src/getHueFromRgb.js","../src/getColorForString.js","../src/hsvToRgb.js","app.js"],"sourcesContent":["import getHueFromRgb from \"./getHueFromRgb\"\n/**\n * Convert rgb to HSV\n * @param {Integer} r - red value [0- 255]\n * @param {Integer} g - red value [0- 255]\n * @param {Integer} b - red value [0- 255]\n * @return {Array} hsv - [h, s, v]\n */\nfunction rgbToHsv(r, g, b) {\n  r = r / 255\n  g = g / 255\n  b = b / 255\n  const M = Math.max(r, g, b)\n  const m = Math.min(r, g, b)\n  const c = M - m\n  let sat = 0\n  if (M !== 0) {\n    sat = (c / M) * 100\n  }\n  const hue = getHueFromRgb(r, g, b)\n  const v = Math.max(r, g, b) * 100\n  return [hue, Math.round(sat), Math.round(v)]\n}\n\nexport default rgbToHsv\n","/**\n * Get the Hue from RGB\n * @param {Integer} r - red value [0- 255]\n * @param {Integer} g - red value [0- 255]\n * @param {Integer} b - red value [0- 255]\n * @return {Integer} - hue - 0 - 360\n */\nfunction getHueFromRgb(r, g, b) {\n  const M = Math.max(r, g, b)\n  const m = Math.min(r, g, b)\n  const c = M - m\n  let hx = 0\n  if (c === 0) {\n    hx = 0\n  } else if (M === r) {\n    hx = ((g - b) / c) % 6\n  } else if (M === g) {\n    hx = (b - r) / c + 2\n  } else if (M === b) {\n    hx = (r - g) / c + 4\n  }\n  hx = hx * 60\n  if (hx < 0) {\n    hx = hx + 360\n  }\n  return Math.round(hx)\n}\n\nexport default getHueFromRgb\n","import rgbToHsv from \"./rgbToHsv\"\nimport hsvToRgb from \"./hsvToRgb\"\n\n// cache the calculated colors\nlet colorForString = {\n  \"\": [0, 0, 0],\n}\n\nconst defaultOptions = {\n  contrast: 35,\n}\n\nfunction getColorForString(str = \"\", options = {}) {\n  options = Object.assign({}, defaultOptions, options)\n  const cacheKey = str + JSON.stringify(options)\n  if (colorForString[cacheKey]) {\n    return colorForString[cacheKey]\n  }\n  if (!str) {\n    return colorForString[cacheKey]\n  }\n  const letters = str.split(\"\")\n  // get the hash\n  const hash = letters.reduce((hash, l) => {\n    const val = l.charCodeAt()\n    return val * val * val * val + hash\n  }, 0)\n  // int to rgb\n  const c = (hash & 0x00ffffff).toString(16).toUpperCase()\n  const hex = \"000000\".substring(0, 6 - c.length) + c\n  const int = parseInt(hex, 16)\n  const r = (int >> 16) & 255\n  const g = (int >> 8) & 255\n  const b = int & 255\n\n  const [hue, sat, val] = rgbToHsv(r, g, b)\n  // value to 35 for contrast\n  const rgb = hsvToRgb(hue, sat, Math.min(val, options.contrast || 35))\n  colorForString[cacheKey] = rgb\n  return rgb\n}\n\nexport default getColorForString\n","/**\n * Converts HSV to RGB value.\n *\n * @param {Integer} h Hue as a value between 0 - 360 degrees\n * @param {Integer} s Saturation as a value between 0 - 100%\n * @param {Integer} v Value as a value between 0 - 100%\n * @returns {Array} The RGB values  EG: [r,g,b], [255,255,255]\n */\n\nfunction hsvToRgb(h, s, v) {\n  v = v / 100\n  s = s / 100\n  const c = v * s\n  const hx = h / 60\n  const x = c * (1 - Math.abs((hx % 2) - 1))\n  let rgb = [0, 0, 0]\n  if (!h) {\n    rgb = [0, 0, 0]\n  } else if (hx >= 0 && hx <= 1) {\n    rgb = [c, x, 0]\n  } else if (hx >= 1 && hx <= 2) {\n    rgb = [x, c, 0]\n  } else if (hx >= 2 && hx <= 3) {\n    rgb = [0, c, x]\n  } else if (hx >= 3 && hx <= 3) {\n    rgb = [0, x, c]\n  } else if (hx >= 4 && hx <= 5) {\n    rgb = [x, 0, c]\n  } else {\n    rgb = [c, 0, x]\n  }\n  const m = v - c\n  return rgb.map(c => Math.round((c + m) * 256))\n}\n\nexport default hsvToRgb\n","import { getColorForString } from \"./../src\"\n\nconst input = document.getElementById(\"input\")\nconst text = document.getElementById(\"text\")\n\ninput.addEventListener(\"input\", function(e) {\n  const value = e.target.value\n  document.body.style.background =\n    \"rgb(\" + getColorForString(value).join(\",\") + \")\"\n  text.innerText = value\n})\n"],"names":["rgbToHsv","r","g","b","M","Math","max","m","min","sat","hue","c","hx","round","getHueFromRgb","v","colorForString","defaultOptions","contrast","getColorForString","str","options","Object","assign","cacheKey","JSON","stringify","split","reduce","hash","l","val","charCodeAt","toString","toUpperCase","hex","substring","length","int","parseInt","rgb","h","s","x","abs","map","hsvToRgb","input","document","getElementById","text","addEventListener","e","value","target","body","style","background","join","innerText"],"mappings":"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"}